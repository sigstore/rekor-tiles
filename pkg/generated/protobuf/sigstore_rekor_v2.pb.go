// Copyright 2025 The Sigstore Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: sigstore_rekor_v2.proto

package protobuf

import (
	v1 "github.com/sigstore/protobuf-specs/gen/pb-go/common/v1"
	dsse "github.com/sigstore/protobuf-specs/gen/pb-go/dsse"
	v11 "github.com/sigstore/protobuf-specs/gen/pb-go/rekor/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Create a new HashedRekord or DSSE
type CreateEntryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Spec:
	//
	//	*CreateEntryRequest_HashedRekordRequestV002
	//	*CreateEntryRequest_DsseRequestV002
	Spec          isCreateEntryRequest_Spec `protobuf_oneof:"spec"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateEntryRequest) Reset() {
	*x = CreateEntryRequest{}
	mi := &file_sigstore_rekor_v2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateEntryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEntryRequest) ProtoMessage() {}

func (x *CreateEntryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_rekor_v2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEntryRequest.ProtoReflect.Descriptor instead.
func (*CreateEntryRequest) Descriptor() ([]byte, []int) {
	return file_sigstore_rekor_v2_proto_rawDescGZIP(), []int{0}
}

func (x *CreateEntryRequest) GetSpec() isCreateEntryRequest_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *CreateEntryRequest) GetHashedRekordRequestV002() *HashedRekordRequestV002 {
	if x != nil {
		if x, ok := x.Spec.(*CreateEntryRequest_HashedRekordRequestV002); ok {
			return x.HashedRekordRequestV002
		}
	}
	return nil
}

func (x *CreateEntryRequest) GetDsseRequestV002() *DSSERequestV002 {
	if x != nil {
		if x, ok := x.Spec.(*CreateEntryRequest_DsseRequestV002); ok {
			return x.DsseRequestV002
		}
	}
	return nil
}

type isCreateEntryRequest_Spec interface {
	isCreateEntryRequest_Spec()
}

type CreateEntryRequest_HashedRekordRequestV002 struct {
	HashedRekordRequestV002 *HashedRekordRequestV002 `protobuf:"bytes,1,opt,name=hashed_rekord_request_v002,json=hashedRekordRequestV002,proto3,oneof"`
}

type CreateEntryRequest_DsseRequestV002 struct {
	DsseRequestV002 *DSSERequestV002 `protobuf:"bytes,2,opt,name=dsse_request_v002,json=dsseRequestV002,proto3,oneof"`
}

func (*CreateEntryRequest_HashedRekordRequestV002) isCreateEntryRequest_Spec() {}

func (*CreateEntryRequest_DsseRequestV002) isCreateEntryRequest_Spec() {}

// A request to add a hashedrekord v0.0.2 to the log
type HashedRekordRequestV002 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hashed data
	Digest []byte `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	// A single signature over the hashed data with the verifier needed to validate it
	Signature     *Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HashedRekordRequestV002) Reset() {
	*x = HashedRekordRequestV002{}
	mi := &file_sigstore_rekor_v2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HashedRekordRequestV002) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashedRekordRequestV002) ProtoMessage() {}

func (x *HashedRekordRequestV002) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_rekor_v2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashedRekordRequestV002.ProtoReflect.Descriptor instead.
func (*HashedRekordRequestV002) Descriptor() ([]byte, []int) {
	return file_sigstore_rekor_v2_proto_rawDescGZIP(), []int{1}
}

func (x *HashedRekordRequestV002) GetDigest() []byte {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *HashedRekordRequestV002) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// A request to add a DSSE v0.0.2 entry to the log
type DSSERequestV002 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A DSSE envelope
	Envelope *dsse.Envelope `protobuf:"bytes,1,opt,name=envelope,proto3" json:"envelope,omitempty"`
	// All necessary verification material to verify all signatures embedded in the envelope
	Verifiers     []*Verifier `protobuf:"bytes,2,rep,name=verifiers,proto3" json:"verifiers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DSSERequestV002) Reset() {
	*x = DSSERequestV002{}
	mi := &file_sigstore_rekor_v2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DSSERequestV002) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSSERequestV002) ProtoMessage() {}

func (x *DSSERequestV002) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_rekor_v2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSSERequestV002.ProtoReflect.Descriptor instead.
func (*DSSERequestV002) Descriptor() ([]byte, []int) {
	return file_sigstore_rekor_v2_proto_rawDescGZIP(), []int{2}
}

func (x *DSSERequestV002) GetEnvelope() *dsse.Envelope {
	if x != nil {
		return x.Envelope
	}
	return nil
}

func (x *DSSERequestV002) GetVerifiers() []*Verifier {
	if x != nil {
		return x.Verifiers
	}
	return nil
}

// Request for a full or partial tile (see https://github.com/C2SP/C2SP/blob/main/tlog-tiles.md#merkle-tree)
type TileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	L     uint32                 `protobuf:"varint,1,opt,name=L,proto3" json:"L,omitempty"`
	// N must be either an index encoded as zero-padded 3-digit path elements, e.g. "x123/x456/789",
	// and may end with ".p/<W>", where "<W>" is a uint8
	N             string `protobuf:"bytes,2,opt,name=N,proto3" json:"N,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TileRequest) Reset() {
	*x = TileRequest{}
	mi := &file_sigstore_rekor_v2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TileRequest) ProtoMessage() {}

func (x *TileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_rekor_v2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TileRequest.ProtoReflect.Descriptor instead.
func (*TileRequest) Descriptor() ([]byte, []int) {
	return file_sigstore_rekor_v2_proto_rawDescGZIP(), []int{3}
}

func (x *TileRequest) GetL() uint32 {
	if x != nil {
		return x.L
	}
	return 0
}

func (x *TileRequest) GetN() string {
	if x != nil {
		return x.N
	}
	return ""
}

// Request for a full or partial entry bundle (see https://github.com/C2SP/C2SP/blob/main/tlog-tiles.md#log-entries)
type EntryBundleRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// N must be either an index encoded as zero-padded 3-digit path elements, e.g. "x123/x456/789",
	// and may end with ".p/<W>", where "<W>" is a uint8
	N             string `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EntryBundleRequest) Reset() {
	*x = EntryBundleRequest{}
	mi := &file_sigstore_rekor_v2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EntryBundleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EntryBundleRequest) ProtoMessage() {}

func (x *EntryBundleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_rekor_v2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EntryBundleRequest.ProtoReflect.Descriptor instead.
func (*EntryBundleRequest) Descriptor() ([]byte, []int) {
	return file_sigstore_rekor_v2_proto_rawDescGZIP(), []int{4}
}

func (x *EntryBundleRequest) GetN() string {
	if x != nil {
		return x.N
	}
	return ""
}

// Entry is the message that is canonicalized and uploaded to the log.
// This format is meant to be compliant with Rekor v1 entries in that
// the `apiVersion` and `kind` can be parsed before parsing the spec.
// Clients are expected to understand and handle the differences in the
// contents of `spec` between Rekor v1 (a polymorphic OpenAPI definition)
// and Rekor v2 (a typed proto defintion).
type Entry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          string                 `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	ApiVersion    string                 `protobuf:"bytes,2,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	Spec          *Spec                  `protobuf:"bytes,3,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Entry) Reset() {
	*x = Entry{}
	mi := &file_sigstore_rekor_v2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Entry) ProtoMessage() {}

func (x *Entry) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_rekor_v2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Entry.ProtoReflect.Descriptor instead.
func (*Entry) Descriptor() ([]byte, []int) {
	return file_sigstore_rekor_v2_proto_rawDescGZIP(), []int{5}
}

func (x *Entry) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Entry) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *Entry) GetSpec() *Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// Spec contains one of the Rekor entry types.
type Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Spec:
	//
	//	*Spec_HashedRekordV002
	//	*Spec_DsseV002
	Spec          isSpec_Spec `protobuf_oneof:"spec"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Spec) Reset() {
	*x = Spec{}
	mi := &file_sigstore_rekor_v2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spec) ProtoMessage() {}

func (x *Spec) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_rekor_v2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spec.ProtoReflect.Descriptor instead.
func (*Spec) Descriptor() ([]byte, []int) {
	return file_sigstore_rekor_v2_proto_rawDescGZIP(), []int{6}
}

func (x *Spec) GetSpec() isSpec_Spec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Spec) GetHashedRekordV002() *HashedRekordLogEntryV002 {
	if x != nil {
		if x, ok := x.Spec.(*Spec_HashedRekordV002); ok {
			return x.HashedRekordV002
		}
	}
	return nil
}

func (x *Spec) GetDsseV002() *DSSELogEntryV002 {
	if x != nil {
		if x, ok := x.Spec.(*Spec_DsseV002); ok {
			return x.DsseV002
		}
	}
	return nil
}

type isSpec_Spec interface {
	isSpec_Spec()
}

type Spec_HashedRekordV002 struct {
	HashedRekordV002 *HashedRekordLogEntryV002 `protobuf:"bytes,1,opt,name=hashed_rekord_v002,json=hashedRekordV002,proto3,oneof"`
}

type Spec_DsseV002 struct {
	DsseV002 *DSSELogEntryV002 `protobuf:"bytes,2,opt,name=dsse_v002,json=dsseV002,proto3,oneof"`
}

func (*Spec_HashedRekordV002) isSpec_Spec() {}

func (*Spec_DsseV002) isSpec_Spec() {}

type HashedRekordLogEntryV002 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hashed data
	Data *v1.HashOutput `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// A single signature over the hashed data with the verifier needed to validate it
	Signature     *Signature `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HashedRekordLogEntryV002) Reset() {
	*x = HashedRekordLogEntryV002{}
	mi := &file_sigstore_rekor_v2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HashedRekordLogEntryV002) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashedRekordLogEntryV002) ProtoMessage() {}

func (x *HashedRekordLogEntryV002) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_rekor_v2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashedRekordLogEntryV002.ProtoReflect.Descriptor instead.
func (*HashedRekordLogEntryV002) Descriptor() ([]byte, []int) {
	return file_sigstore_rekor_v2_proto_rawDescGZIP(), []int{7}
}

func (x *HashedRekordLogEntryV002) GetData() *v1.HashOutput {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HashedRekordLogEntryV002) GetSignature() *Signature {
	if x != nil {
		return x.Signature
	}
	return nil
}

type DSSELogEntryV002 struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The hash of the DSSE payload
	PayloadHash *v1.HashOutput `protobuf:"bytes,1,opt,name=payloadHash,proto3" json:"payloadHash,omitempty"`
	// Signatures and their associated verification material used to verify the payload
	Signatures    []*Signature `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DSSELogEntryV002) Reset() {
	*x = DSSELogEntryV002{}
	mi := &file_sigstore_rekor_v2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DSSELogEntryV002) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DSSELogEntryV002) ProtoMessage() {}

func (x *DSSELogEntryV002) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_rekor_v2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DSSELogEntryV002.ProtoReflect.Descriptor instead.
func (*DSSELogEntryV002) Descriptor() ([]byte, []int) {
	return file_sigstore_rekor_v2_proto_rawDescGZIP(), []int{8}
}

func (x *DSSELogEntryV002) GetPayloadHash() *v1.HashOutput {
	if x != nil {
		return x.PayloadHash
	}
	return nil
}

func (x *DSSELogEntryV002) GetSignatures() []*Signature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// PublicKey contains an encoded public key
type PublicKey struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// DER-encoded public key
	RawBytes      []byte `protobuf:"bytes,1,opt,name=raw_bytes,json=rawBytes,proto3" json:"raw_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	mi := &file_sigstore_rekor_v2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_rekor_v2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_sigstore_rekor_v2_proto_rawDescGZIP(), []int{9}
}

func (x *PublicKey) GetRawBytes() []byte {
	if x != nil {
		return x.RawBytes
	}
	return nil
}

// Either a public key or a X.509 cerificiate with an embedded public key
type Verifier struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Verifier:
	//
	//	*Verifier_PublicKey
	//	*Verifier_X509Certificate
	Verifier isVerifier_Verifier `protobuf_oneof:"verifier"`
	// Key encoding and signature algorithm to use for this key
	KeyDetails    v1.PublicKeyDetails `protobuf:"varint,3,opt,name=key_details,json=keyDetails,proto3,enum=dev.sigstore.common.v1.PublicKeyDetails" json:"key_details,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Verifier) Reset() {
	*x = Verifier{}
	mi := &file_sigstore_rekor_v2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Verifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verifier) ProtoMessage() {}

func (x *Verifier) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_rekor_v2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verifier.ProtoReflect.Descriptor instead.
func (*Verifier) Descriptor() ([]byte, []int) {
	return file_sigstore_rekor_v2_proto_rawDescGZIP(), []int{10}
}

func (x *Verifier) GetVerifier() isVerifier_Verifier {
	if x != nil {
		return x.Verifier
	}
	return nil
}

func (x *Verifier) GetPublicKey() *PublicKey {
	if x != nil {
		if x, ok := x.Verifier.(*Verifier_PublicKey); ok {
			return x.PublicKey
		}
	}
	return nil
}

func (x *Verifier) GetX509Certificate() *v1.X509Certificate {
	if x != nil {
		if x, ok := x.Verifier.(*Verifier_X509Certificate); ok {
			return x.X509Certificate
		}
	}
	return nil
}

func (x *Verifier) GetKeyDetails() v1.PublicKeyDetails {
	if x != nil {
		return x.KeyDetails
	}
	return v1.PublicKeyDetails(0)
}

type isVerifier_Verifier interface {
	isVerifier_Verifier()
}

type Verifier_PublicKey struct {
	// DER-encoded public key. Encoding method is specified by the key_details attribute
	PublicKey *PublicKey `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3,oneof"`
}

type Verifier_X509Certificate struct {
	// DER-encoded certificate
	X509Certificate *v1.X509Certificate `protobuf:"bytes,2,opt,name=x509_certificate,json=x509Certificate,proto3,oneof"`
}

func (*Verifier_PublicKey) isVerifier_Verifier() {}

func (*Verifier_X509Certificate) isVerifier_Verifier() {}

// A signature and an associated verifier
type Signature struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       []byte                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	Verifier      *Verifier              `protobuf:"bytes,2,opt,name=verifier,proto3" json:"verifier,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Signature) Reset() {
	*x = Signature{}
	mi := &file_sigstore_rekor_v2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_sigstore_rekor_v2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_sigstore_rekor_v2_proto_rawDescGZIP(), []int{11}
}

func (x *Signature) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Signature) GetVerifier() *Verifier {
	if x != nil {
		return x.Verifier
	}
	return nil
}

var File_sigstore_rekor_v2_proto protoreflect.FileDescriptor

const file_sigstore_rekor_v2_proto_rawDesc = "" +
	"\n" +
	"\x17sigstore_rekor_v2.proto\x12\x15dev.sigstore.rekor.v2\x1a\x0eenvelope.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/httpbody.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a\x15sigstore_common.proto\x1a\x14sigstore_rekor.proto\"\xeb\x01\n" +
	"\x12CreateEntryRequest\x12r\n" +
	"\x1ahashed_rekord_request_v002\x18\x01 \x01(\v2..dev.sigstore.rekor.v2.HashedRekordRequestV002B\x03\xe0A\x02H\x00R\x17hashedRekordRequestV002\x12Y\n" +
	"\x11dsse_request_v002\x18\x02 \x01(\v2&.dev.sigstore.rekor.v2.DSSERequestV002B\x03\xe0A\x02H\x00R\x0fdsseRequestV002B\x06\n" +
	"\x04spec\"{\n" +
	"\x17HashedRekordRequestV002\x12\x1b\n" +
	"\x06digest\x18\x01 \x01(\fB\x03\xe0A\x02R\x06digest\x12C\n" +
	"\tsignature\x18\x02 \x01(\v2 .dev.sigstore.rekor.v2.SignatureB\x03\xe0A\x02R\tsignature\"\x8b\x01\n" +
	"\x0fDSSERequestV002\x124\n" +
	"\benvelope\x18\x01 \x01(\v2\x13.io.intoto.EnvelopeB\x03\xe0A\x02R\benvelope\x12B\n" +
	"\tverifiers\x18\x02 \x03(\v2\x1f.dev.sigstore.rekor.v2.VerifierB\x03\xe0A\x02R\tverifiers\")\n" +
	"\vTileRequest\x12\f\n" +
	"\x01L\x18\x01 \x01(\rR\x01L\x12\f\n" +
	"\x01N\x18\x02 \x01(\tR\x01N\"\"\n" +
	"\x12EntryBundleRequest\x12\f\n" +
	"\x01N\x18\x01 \x01(\tR\x01N\"|\n" +
	"\x05Entry\x12\x17\n" +
	"\x04kind\x18\x01 \x01(\tB\x03\xe0A\x02R\x04kind\x12$\n" +
	"\vapi_version\x18\x02 \x01(\tB\x03\xe0A\x02R\n" +
	"apiVersion\x124\n" +
	"\x04spec\x18\x03 \x01(\v2\x1b.dev.sigstore.rekor.v2.SpecB\x03\xe0A\x02R\x04spec\"\xc1\x01\n" +
	"\x04Spec\x12d\n" +
	"\x12hashed_rekord_v002\x18\x01 \x01(\v2/.dev.sigstore.rekor.v2.HashedRekordLogEntryV002B\x03\xe0A\x02H\x00R\x10hashedRekordV002\x12K\n" +
	"\tdsse_v002\x18\x02 \x01(\v2'.dev.sigstore.rekor.v2.DSSELogEntryV002B\x03\xe0A\x02H\x00R\bdsseV002B\x06\n" +
	"\x04spec\"\x9c\x01\n" +
	"\x18HashedRekordLogEntryV002\x12;\n" +
	"\x04data\x18\x01 \x01(\v2\".dev.sigstore.common.v1.HashOutputB\x03\xe0A\x02R\x04data\x12C\n" +
	"\tsignature\x18\x02 \x01(\v2 .dev.sigstore.rekor.v2.SignatureB\x03\xe0A\x02R\tsignature\"\xa4\x01\n" +
	"\x10DSSELogEntryV002\x12I\n" +
	"\vpayloadHash\x18\x01 \x01(\v2\".dev.sigstore.common.v1.HashOutputB\x03\xe0A\x02R\vpayloadHash\x12E\n" +
	"\n" +
	"signatures\x18\x02 \x03(\v2 .dev.sigstore.rekor.v2.SignatureB\x03\xe0A\x02R\n" +
	"signatures\"-\n" +
	"\tPublicKey\x12 \n" +
	"\traw_bytes\x18\x01 \x01(\fB\x03\xe0A\x02R\brawBytes\"\x89\x02\n" +
	"\bVerifier\x12F\n" +
	"\n" +
	"public_key\x18\x01 \x01(\v2 .dev.sigstore.rekor.v2.PublicKeyB\x03\xe0A\x02H\x00R\tpublicKey\x12Y\n" +
	"\x10x509_certificate\x18\x02 \x01(\v2'.dev.sigstore.common.v1.X509CertificateB\x03\xe0A\x02H\x00R\x0fx509Certificate\x12N\n" +
	"\vkey_details\x18\x03 \x01(\x0e2(.dev.sigstore.common.v1.PublicKeyDetailsB\x03\xe0A\x02R\n" +
	"keyDetailsB\n" +
	"\n" +
	"\bverifier\"l\n" +
	"\tSignature\x12\x1d\n" +
	"\acontent\x18\x01 \x01(\fB\x03\xe0A\x02R\acontent\x12@\n" +
	"\bverifier\x18\x02 \x01(\v2\x1f.dev.sigstore.rekor.v2.VerifierB\x03\xe0A\x02R\bverifier2\xc8\x03\n" +
	"\x05Rekor\x12\x85\x01\n" +
	"\vCreateEntry\x12).dev.sigstore.rekor.v2.CreateEntryRequest\x1a+.dev.sigstore.rekor.v1.TransparencyLogEntry\"\x1e\x82\xd3\xe4\x93\x02\x18:\x01*\"\x13/api/v2/log/entries\x12d\n" +
	"\aGetTile\x12\".dev.sigstore.rekor.v2.TileRequest\x1a\x14.google.api.HttpBody\"\x1f\x82\xd3\xe4\x93\x02\x19\x12\x17/api/v2/tile/{L}/{N=**}\x12v\n" +
	"\x0eGetEntryBundle\x12).dev.sigstore.rekor.v2.EntryBundleRequest\x1a\x14.google.api.HttpBody\"#\x82\xd3\xe4\x93\x02\x1d\x12\x1b/api/v2/tile/entries/{N=**}\x12Y\n" +
	"\rGetCheckpoint\x12\x16.google.protobuf.Empty\x1a\x14.google.api.HttpBody\"\x1a\x82\xd3\xe4\x93\x02\x14\x12\x12/api/v2/checkpointB8Z6github.com/sigstore/rekor-tiles/pkg/generated/protobufb\x06proto3"

var (
	file_sigstore_rekor_v2_proto_rawDescOnce sync.Once
	file_sigstore_rekor_v2_proto_rawDescData []byte
)

func file_sigstore_rekor_v2_proto_rawDescGZIP() []byte {
	file_sigstore_rekor_v2_proto_rawDescOnce.Do(func() {
		file_sigstore_rekor_v2_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_sigstore_rekor_v2_proto_rawDesc), len(file_sigstore_rekor_v2_proto_rawDesc)))
	})
	return file_sigstore_rekor_v2_proto_rawDescData
}

var file_sigstore_rekor_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_sigstore_rekor_v2_proto_goTypes = []any{
	(*CreateEntryRequest)(nil),       // 0: dev.sigstore.rekor.v2.CreateEntryRequest
	(*HashedRekordRequestV002)(nil),  // 1: dev.sigstore.rekor.v2.HashedRekordRequestV002
	(*DSSERequestV002)(nil),          // 2: dev.sigstore.rekor.v2.DSSERequestV002
	(*TileRequest)(nil),              // 3: dev.sigstore.rekor.v2.TileRequest
	(*EntryBundleRequest)(nil),       // 4: dev.sigstore.rekor.v2.EntryBundleRequest
	(*Entry)(nil),                    // 5: dev.sigstore.rekor.v2.Entry
	(*Spec)(nil),                     // 6: dev.sigstore.rekor.v2.Spec
	(*HashedRekordLogEntryV002)(nil), // 7: dev.sigstore.rekor.v2.HashedRekordLogEntryV002
	(*DSSELogEntryV002)(nil),         // 8: dev.sigstore.rekor.v2.DSSELogEntryV002
	(*PublicKey)(nil),                // 9: dev.sigstore.rekor.v2.PublicKey
	(*Verifier)(nil),                 // 10: dev.sigstore.rekor.v2.Verifier
	(*Signature)(nil),                // 11: dev.sigstore.rekor.v2.Signature
	(*dsse.Envelope)(nil),            // 12: io.intoto.Envelope
	(*v1.HashOutput)(nil),            // 13: dev.sigstore.common.v1.HashOutput
	(*v1.X509Certificate)(nil),       // 14: dev.sigstore.common.v1.X509Certificate
	(v1.PublicKeyDetails)(0),         // 15: dev.sigstore.common.v1.PublicKeyDetails
	(*emptypb.Empty)(nil),            // 16: google.protobuf.Empty
	(*v11.TransparencyLogEntry)(nil), // 17: dev.sigstore.rekor.v1.TransparencyLogEntry
	(*httpbody.HttpBody)(nil),        // 18: google.api.HttpBody
}
var file_sigstore_rekor_v2_proto_depIdxs = []int32{
	1,  // 0: dev.sigstore.rekor.v2.CreateEntryRequest.hashed_rekord_request_v002:type_name -> dev.sigstore.rekor.v2.HashedRekordRequestV002
	2,  // 1: dev.sigstore.rekor.v2.CreateEntryRequest.dsse_request_v002:type_name -> dev.sigstore.rekor.v2.DSSERequestV002
	11, // 2: dev.sigstore.rekor.v2.HashedRekordRequestV002.signature:type_name -> dev.sigstore.rekor.v2.Signature
	12, // 3: dev.sigstore.rekor.v2.DSSERequestV002.envelope:type_name -> io.intoto.Envelope
	10, // 4: dev.sigstore.rekor.v2.DSSERequestV002.verifiers:type_name -> dev.sigstore.rekor.v2.Verifier
	6,  // 5: dev.sigstore.rekor.v2.Entry.spec:type_name -> dev.sigstore.rekor.v2.Spec
	7,  // 6: dev.sigstore.rekor.v2.Spec.hashed_rekord_v002:type_name -> dev.sigstore.rekor.v2.HashedRekordLogEntryV002
	8,  // 7: dev.sigstore.rekor.v2.Spec.dsse_v002:type_name -> dev.sigstore.rekor.v2.DSSELogEntryV002
	13, // 8: dev.sigstore.rekor.v2.HashedRekordLogEntryV002.data:type_name -> dev.sigstore.common.v1.HashOutput
	11, // 9: dev.sigstore.rekor.v2.HashedRekordLogEntryV002.signature:type_name -> dev.sigstore.rekor.v2.Signature
	13, // 10: dev.sigstore.rekor.v2.DSSELogEntryV002.payloadHash:type_name -> dev.sigstore.common.v1.HashOutput
	11, // 11: dev.sigstore.rekor.v2.DSSELogEntryV002.signatures:type_name -> dev.sigstore.rekor.v2.Signature
	9,  // 12: dev.sigstore.rekor.v2.Verifier.public_key:type_name -> dev.sigstore.rekor.v2.PublicKey
	14, // 13: dev.sigstore.rekor.v2.Verifier.x509_certificate:type_name -> dev.sigstore.common.v1.X509Certificate
	15, // 14: dev.sigstore.rekor.v2.Verifier.key_details:type_name -> dev.sigstore.common.v1.PublicKeyDetails
	10, // 15: dev.sigstore.rekor.v2.Signature.verifier:type_name -> dev.sigstore.rekor.v2.Verifier
	0,  // 16: dev.sigstore.rekor.v2.Rekor.CreateEntry:input_type -> dev.sigstore.rekor.v2.CreateEntryRequest
	3,  // 17: dev.sigstore.rekor.v2.Rekor.GetTile:input_type -> dev.sigstore.rekor.v2.TileRequest
	4,  // 18: dev.sigstore.rekor.v2.Rekor.GetEntryBundle:input_type -> dev.sigstore.rekor.v2.EntryBundleRequest
	16, // 19: dev.sigstore.rekor.v2.Rekor.GetCheckpoint:input_type -> google.protobuf.Empty
	17, // 20: dev.sigstore.rekor.v2.Rekor.CreateEntry:output_type -> dev.sigstore.rekor.v1.TransparencyLogEntry
	18, // 21: dev.sigstore.rekor.v2.Rekor.GetTile:output_type -> google.api.HttpBody
	18, // 22: dev.sigstore.rekor.v2.Rekor.GetEntryBundle:output_type -> google.api.HttpBody
	18, // 23: dev.sigstore.rekor.v2.Rekor.GetCheckpoint:output_type -> google.api.HttpBody
	20, // [20:24] is the sub-list for method output_type
	16, // [16:20] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_sigstore_rekor_v2_proto_init() }
func file_sigstore_rekor_v2_proto_init() {
	if File_sigstore_rekor_v2_proto != nil {
		return
	}
	file_sigstore_rekor_v2_proto_msgTypes[0].OneofWrappers = []any{
		(*CreateEntryRequest_HashedRekordRequestV002)(nil),
		(*CreateEntryRequest_DsseRequestV002)(nil),
	}
	file_sigstore_rekor_v2_proto_msgTypes[6].OneofWrappers = []any{
		(*Spec_HashedRekordV002)(nil),
		(*Spec_DsseV002)(nil),
	}
	file_sigstore_rekor_v2_proto_msgTypes[10].OneofWrappers = []any{
		(*Verifier_PublicKey)(nil),
		(*Verifier_X509Certificate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_sigstore_rekor_v2_proto_rawDesc), len(file_sigstore_rekor_v2_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_sigstore_rekor_v2_proto_goTypes,
		DependencyIndexes: file_sigstore_rekor_v2_proto_depIdxs,
		MessageInfos:      file_sigstore_rekor_v2_proto_msgTypes,
	}.Build()
	File_sigstore_rekor_v2_proto = out.File
	file_sigstore_rekor_v2_proto_goTypes = nil
	file_sigstore_rekor_v2_proto_depIdxs = nil
}
