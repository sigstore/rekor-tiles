# Copyright 2025 The Sigstore Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: CI Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: Build CLI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Extract version of Go to use
        run: echo "GOVERSION=$(awk -F'[:@]' '/FROM golang/{print $2; exit}' Dockerfile)" >> $GITHUB_ENV
      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GOVERSION }}
      - name: Build
        run: make -C $GITHUB_WORKSPACE all
      - name: Ensure no files were modified as a result of the build
        run: git update-index --refresh && git diff-index --quiet HEAD -- || git diff --exit-code

  container-build:
    name: Build container
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Extract version of Go to use
        run: echo "GOVERSION=$(awk -F'[:@]' '/FROM golang/{print $2; exit}' Dockerfile)" >> $GITHUB_ENV
      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version: ${{ env.GOVERSION }}

      - uses: ko-build/setup-ko@d006021bd0c28d1ce33a07e7943d48b079944c8d # v0.9

      - name: container
        run: |
          make ko-local
          docker run --rm $(cat rekorImagerefs) version

  unit-tests:
    name: Run unit tests
    permissions:
      contents: read
      id-token: write # to authenticate with codecov
    runs-on: ubuntu-latest

    env:
      OS: ubuntu-latest

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: './go.mod'
          check-latest: true
      - name: Run Go tests
        run: go test -covermode atomic -coverprofile coverage.txt $(go list ./... | grep -v third_party/)
      - name: Workaround buggy Codecov OIDC auth
        run: |
          # only set CODECOV_TOKEN if OIDC token is available
          [ -z $ACTIONS_ID_TOKEN_REQUEST_TOKEN ] && exit 0

          TOKEN_RESPONSE=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=https://codecov.io")
          CODECOV_TOKEN=$(echo $TOKEN_RESPONSE | jq -r .value)
          echo "CODECOV_TOKEN=$CODECOV_TOKEN" >> "$GITHUB_ENV"
      - name: Upload Coverage Report
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          env_vars: OS
          fail_ci_if_error: true
          # When github.com/codecov/codecov-action/issues/1791 is fixed,
          # remove workaround step above and uncomment:
          # use_oidc: true
      - name: Run Go tests w/ `-race`
        if: ${{ runner.os == 'Linux' }}
        run: go test -race $(go list ./... | grep -v third_party/)

  e2e-tests:
    name: Run E2E tests
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Run docker compose
        run: docker compose -f compose.yml up -d --build --wait --wait-timeout 60
      - name: Run e2e tests
        run: go test -v -tags=e2e ./tests/

  sharding-freeze:
    name: Run freeze log tests
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - name: Run freeze tests
        run:
          ./tests/freeze-test.sh

  sharding-e2e:
    name: Run sharding E2E tests
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          persist-credentials: false
      - uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0
        with:
          cosign-release: v2.5.3
      - name: Install faketime
        run: sudo apt install faketime -y
      - uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0
        with:
          go-version-file: './go.mod'
          check-latest: true
      - name: Run tests
        working-directory: ./tests/sharding
        run: ./test.sh
