// Copyright 2025 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package dev.sigstore.rekor.v2;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/httpbody.proto";
import "google/protobuf/empty.proto";
import "sigstore_rekor.proto";
import "hashedrekord.proto";
import "dsse.proto";

option go_package = "github.com/sigstore/rekor-tiles/pkg/generated/protobuf";

// A service for sigstore clients to connect to to create log entries
// and for log monitors and witnesses to audit/inspect the log
service Rekor {
    // Create an entry in the log
    rpc CreateEntry (CreateEntryRequest) returns (dev.sigstore.rekor.v1.TransparencyLogEntry) {
        option (google.api.http) = {
            post: "/api/v2/log/entries"
            body: "*"
        };
    }
    // Get a tile from the log
    rpc GetTile (TileRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/api/v2/tile/{L}/{N}"
        };
    }
    // Get a partial tile from the log
    rpc GetPartialTile (PartialTileRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/api/v2/tile/{L}/{N}/{W}"
        };
    }

    // Get an entry bundle from the log
    rpc GetEntryBundle (EntryBundleRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/api/v2/tile/entries/{N}"
        };
    }
    // Get a partial entry bundle from the log
    rpc GetPartialEntryBundle (PartialEntryBundleRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/api/v2/tile/entries/{N}/{W}"
        };
    }

    // Get a checkpoint from the log
    rpc GetCheckpoint (google.protobuf.Empty) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/api/v2/checkpoint"
        };
    }
}

// Create a new HashedRekord or DSSE
message CreateEntryRequest {
    oneof spec {
        HashedRekordRequest hashed_rekord_request = 1 [(google.api.field_behavior) = REQUIRED];
        DSSERequest dsse_request  = 2 [(google.api.field_behavior) = REQUIRED];
    }
}

// a request for a full tile (see https://github.com/C2SP/C2SP/blob/main/tlog-tiles.md#merkle-tree)
message TileRequest {
    int32 L = 1;
    int32 N = 2;
}

// a request for a partial tile (see https://github.com/C2SP/C2SP/blob/main/tlog-tiles.md#merkle-tree)
message PartialTileRequest {
    int32 L = 1;
    string N = 2; // must match <int32>.p
    int32 W = 3;
}

// a request for an entry bundle (see https://github.com/C2SP/C2SP/blob/main/tlog-tiles.md#log-entries)
message EntryBundleRequest {
    int32 N = 1;
}

// a request for a partial entry bundle (see https://github.com/C2SP/C2SP/blob/main/tlog-tiles.md#log-entries)
message PartialEntryBundleRequest {
    string N = 1; // must match <int32>.p
    int32 W = 2;
}
